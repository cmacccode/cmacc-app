<style>
  cmacc-placeholder-inline {
    border: 1px solid lightgrey;
    cursor: pointer;
  }

  cmacc-placeholder-block {
    border-bottom: 2px solid lightgrey;
    display: block;
    cursor: pointer;
  }

  cmacc-placeholder-block cmacc-placeholder-block:last-child {
    margin-bottom: -2px; /* This negative margin overlaps the bottom border */
  }

  cmacc-placeholder-inline[overwrite], cmacc-placeholder-block[overwrite] {
    background-color: lightcoral;
  }

  nav {
    margin-bottom: 20px;
  }


</style>

<script>

  const loaderCache = {};

  function remoteLoader(urlObj) {

    const host = urlObj.host !== '' ? '/' + urlObj.host : '';
    const source = urlObj.protocol.replace(':', '');
    const ref = `/loader/${source}${host}${urlObj.path}`;

    if (loaderCache[ref]) {
      return loaderCache[ref];
    }

    const res = fetch(ref, {credentials: 'same-origin'}).then(function (res) {
      return res.json();
    }).then(function (res) {
      return res
    });

    return loaderCache[ref] = res;
  }

  const loaders = {
    'file:': remoteLoader,
    'yarn:': remoteLoader,
    'http:': remoteLoader,
    'https:': remoteLoader,
    'github:': remoteLoader
  };

  const ref = 'github:///{{context.user}}/{{context.repo}}/{{context.branch}}/{{context.path}}';

  const context = {
    user: '{{context.user}}',
    repo: '{{context.repo}}',
    branch: '{{context.branch}}',
    path: '{{context.path}}'
  };

  const opts = {
    base: ref,
    loaders
  };

  const editor = new window.Cmacc.CmaccEditor(ref, opts);

  function render () {
    const content = $('#content');
    return editor.render(true)
            .then(html => content.html(html))
            .then(x => bind())
  };

  function bind() {

    const editModal = $('#editModal');

    const elements = $('cmacc-placeholder-inline, cmacc-placeholder-block');

    elements.each(function (i, el) {

      const path = $(el).attr('variable')
      if (editor.mutations.find(x => x.path === path)) {
        $(el).attr('overwrite', true)
      }
      $(el).attr('data-toggle', 'tooltip');
      $(el).attr('title', path);

    });

    //elements.tooltip();

    elements.mousemove(function (ev) {
      if ($(ev.currentTarget))
        elements.css("background-color", "");
      $(ev.currentTarget).css("background-color", "#f7f7f9");
      ev.preventDefault();
      ev.stopPropagation();
    });

    elements.click(function (ev) {

      var path = $(ev.currentTarget).attr('variable');

      if (!path) {
        return;
      }

      ev.preventDefault();
      ev.stopPropagation();

      $('#form-edit-file').text(path);
      editor.getValue(path).then((value) => {
        $('#form-edit-header').val(value.header.join('\n'));
        $('#form-edit-content').val(value.content.join('\n'));
      });

      editModal.modal('show')

    });
  }

  $(document).ready(function () {

    const saveButton = $('#saveButton');
    const forkButton = $('#forkButton');

    const commitModal = $('#commitModal');
    const forkModal = $('#forkModal');


    saveButton.click(function () {
      $('#form-group-branch').hide();
      $('#form-commit-branch').val();
      commitModal.modal();
    });

    forkButton.click(function () {
      forkModal.modal();
    });

    render();

  });
</script>

<!-- Nav -->
<nav style="margin-bottom: 20px">
  {{> info pdf=true save=canSave fork=canFork}}
</nav>


<!-- Content -->
<div id="content"></div>

{{> modal_edit}}
{{> modal_commit}}
{{> modal_fork}}
