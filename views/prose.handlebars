<style>
  cmacc-placeholder-inline {
    margin: -1px;
    border: 1px dashed purple;
    cursor: pointer;
  }

  cmacc-placeholder-block {
    margin: -1px;
    border: 1px dashed green;
    display: block;
    cursor: pointer;
  }

  cmacc-placeholder-inline[overwrite], cmacc-placeholder-block[overwrite] {
    background-color: lightcoral;
  }


</style>

<script>

  function remoteLoader(urlObj) {
    var ref = `/loader/github${urlObj.path}`
    return fetch(ref, {credentials: 'same-origin'}).then(function (res) {
      return res.json();
    })
  }

  const loaders = {
    'file:': remoteLoader,
    'yarn:': remoteLoader,
    'http:': remoteLoader,
    'https:': remoteLoader,
    'github:': remoteLoader
  };

  const opts = {
    base: 'github:///{{context.user}}/{{context.repo}}/{{context.branch}}/{{context.path}}',
    loaders
  }

  var ref = '/api/{{context.user}}/{{context.repo}}/{{context.branch}}/{{context.path}}?format=assemble';
  var ast = fetch(ref, {credentials: 'same-origin'}).then(function (res) {
    return res.json()
  }).then(function (res) {
    return window.Cmacc.reduce(res)
  });

  const mutations = {};

  function render() {

    return ast.then(function (ast) {
      // mutations
      const res = Object.keys(mutations).map(function (key) {
        const split = key.split('.');
        const last = split.pop();
        const sub = split.reduce((a, b) => a[b], ast)

        const fallBack = sub[last];

        if (/\r|\n/.exec(mutations[key])) {
          return window.Cmacc.compile(mutations[key], opts)
                  .then(x => {
                    return x['$md']
                  })
                  .then(function (res) {
                    Object.defineProperty(sub, last, {
                      get: function () {
                        if (mutations[key]) {
                          if (Array.isArray(res)) {
                            fallBack['$md'] = res
                          } else {
                            return res
                          }
                        }
                        return fallBack
                      }
                    });

                  });
        } else {

          Object.defineProperty(sub, last, {
            get: function () {
              if (mutations[key]) {
                return mutations[key]
              }
              return fallBack
            }
          });
        }
      });

      return Promise.all(res).then(function () {
        return window.Cmacc.render(ast, opts)
      })


    }).then(function (res) {
      return window.Cmacc.remarkable.render(res, true)
    }).then(function (res) {
      $('#cmacc').html(res)
    })
  }

  function bind(modal) {

    var cmaccElements = $('cmacc-placeholder-inline, cmacc-placeholder-block');

    cmaccElements.each(function (i, el) {
      const path = $(el).attr('variable')
      if (mutations[path]) {
        $(el).attr('overwrite', true)
      }
      $(el).attr('data-toggle', 'tooltip');
      $(el).attr('title', path);
    });
    cmaccElements.tooltip();

    cmaccElements.mousemove(function (ev) {
      if ($(ev.currentTarget))
        cmaccElements.css("background-color", "");
      $(ev.currentTarget).css("background-color", "lightgrey");
      ev.preventDefault();
      ev.stopPropagation();
    });

    cmaccElements.click(function (ev) {

      var path = $(ev.currentTarget).attr('variable');

      if (!path) {
        return;
      }

      $('#form-file').text(path);

      if (mutations[path]) {
        $('#form-value').val(mutations[path]);
      }

      else {
        ast.then(function (ast) {
          const split = path.split('.');
          const last = split.pop();
          const sub = split.reduce((a, b) => a[b], ast)

          if (typeof sub[last] === 'object') {
            $('#form-value').val(sub[last]['$data']);
          } else {
            $('#form-value').val(sub[last]);
          }

        });

      }

      ev.preventDefault();
      ev.stopPropagation();

      modal.modal('show')

    });
  }


  $(document).ready(function () {

    var modal = $('#myModal');

    render().then(x => bind(modal));

    $('#form-save').click(function () {
      const path = $('#form-file').text();
      const value = $('#form-value').val();
      mutations[path] = value;
      render().then(x => bind(modal));
      modal.modal('hide')
    });

    $('#form-remove').click(function () {
      const path = $('#form-file').text();
      delete mutations[path];
      console.log(path, mutations)
      render().then(x => bind(modal));
      modal.modal('hide')
    });


  });
</script>

<!-- Modal -->
<div id="cmacc"></div>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Prose object</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form>
          <div class="form-group">
            <label>File</label>
            <p class="form-control-static" id="form-file"></p>
          </div>
          <div class="form-group">
            <label for="variable">Value</label>
            <textarea class="form-control" id="form-value" rows="20"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button id="form-remove" type="button" class="btn btn-danger">Remove changes</button>
        <button id="form-save" type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>